from flask import Flask, request, render_template, g, redirect, url_for, session, send_from_directory
import sqlite3

app = Flask(__name__)
app.secret_key = 'Ji1upkki94'
app.config['SESSION_TYPE'] = 'filesystem'

DATABASE = '/var/www/html/flaskapp/dbfile/database.db'

app.config.from_object(__name__)

def connect_to_database():
    return sqlite3.connect(app.config['DATABASE'])

def get_db():
    db = getattr(g, 'db', None)
    if db is None:
        db = g.db = connect_to_database()
    return db

@app.teardown_appcontext
def close_connection(exception):
    db = getattr(g, 'db', None)
    if db is not None:
        db.close()

def execute_query(query, args=()):
    cur = get_db().execute(query, args)
    rows = cur.fetchall()
    cur.close()
    return rows

def execute_query_fetch_one(query, args=()):
    cur = get_db().execute(query, args)
    row = cur.fetchone()
    cur.close()
    return row

# Function to create database table
def create_table():
    get_db().execute('''CREATE TABLE IF NOT EXISTS secrets (id INTEGER PRIMARY KEY AUTOINCREMENT, source_ip TEXT, source_secret_text TEXT)''')
    get_db().commit()

# Route to update database with source IP and secret text
@app.route('/update', methods=['GET'])
def update_database():
    source_ip = request.args.get('source_ip')
    source_secret_text = request.args.get('source_secret_text')
    get_db().execute('INSERT INTO secrets (source_ip, source_secret_text) VALUES (?, ?)', (source_ip, source_secret_text))
    get_db().commit()
    return "Updated database with IP {} and secret text {}".format(source_ip, source_secret_text)

# Route to view all entries from the database in HTML
@app.route('/view')
def view_entries():
    rows = execute_query("SELECT * FROM secrets")
    return render_template('view.html', rows=rows)

if __name__ == '__main__':
    create_table()
    app.run()
